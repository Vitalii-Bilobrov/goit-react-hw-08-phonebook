{"version":3,"file":"static/js/810.d9ceca5d.chunk.js","mappings":"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","sources":["redux/contacts/selectors.jsx","components/Contacts/Contacts.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","../node_modules/nanoid/index.browser.js","components/Form/Form.jsx","pages/Contacts.js"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filter;\n","import { deleteContact } from 'redux/contacts/operations';\nimport { useDispatch } from 'react-redux';\n\nexport const Contacts = ({ contactItem }) => {\n  const dispatch = useDispatch();\n  const del = () => {\n    dispatch(deleteContact(contactItem.id));\n  };\n\n  return (\n    <li id={contactItem.id}>\n      <span>{contactItem.name}</span>\n      <span>{contactItem.number}</span>\n      <button type=\"button\" onClick={del}>\n        Delete\n      </button>\n    </li>\n  );\n};\n","import { selectContacts, selectFilter } from 'redux/contacts/selectors';\nimport { Contacts } from 'components/Contacts/Contacts';\nimport { useSelector } from 'react-redux';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const filteredContacts = contacts.filter(el => {\n    return el.name.toLowerCase().includes(filter.toLowerCase());\n  });\n\n  return (\n    <>\n      <ul>\n        {filteredContacts.map(contact => (\n          <Contacts contactItem={contact} key={contact.id} />\n        ))}\n      </ul>\n    </>\n  );\n};\n","import React from 'react';\nimport { PropTypes } from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeFilter } from 'redux/contacts/filterSlice';\nimport { selectFilter } from 'redux/contacts//selectors';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n  const handleChange = e => {\n    dispatch(changeFilter(e.target.value));\n  };\n  return (\n    <>\n      <label>Find contact by name</label>\n      <input\n        onChange={handleChange}\n        value={filter}\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n    </>\n  );\n};\nFilter.propTypes = {\n  filter: PropTypes.func,\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { nanoid } from 'nanoid';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nexport const Form = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  const handelInputChange = evt => {\n    const { name, value } = evt.target;\n\n    if (name === 'name') setName(value);\n    if (name === 'number') setNumber(value);\n  };\n\n  const onSubmitForm = evt => {\n    evt.preventDefault();\n    if (contacts.some(el => el.name.toLowerCase() === name.toLowerCase())) {\n      return alert(`We already have ${name}`);\n    }\n    dispatch(addContact({ name: name, number: number, id: nanoid() }));\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n  return (\n    <form onSubmit={onSubmitForm}>\n      <label id={nameInputId}>Name</label>\n      <input\n        value={name}\n        onChange={handelInputChange}\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        id={nameInputId}\n      />\n      <label id={numberInputId}>Number</label>\n      <input\n        value={number}\n        onChange={handelInputChange}\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        id={numberInputId}\n      />\n      <button type=\"submit\">Add contacts</button>\n    </form>\n  );\n};\n","import { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts//selectors';\n\nimport { useEffect } from 'react';\nimport { requestContacts } from 'redux/contacts//operations';\nimport { Form } from 'components/Form/Form';\n\nconst Contacts = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(requestContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <div>\n        <h1>Phonebook</h1>\n        <Form />\n      </div>\n      <div>\n        <h2>Contacts</h2>\n        {contacts.length ? (\n          <>\n            <Filter />\n            <ContactList />\n          </>\n        ) : (\n          <p>You dont have any contacts yet</p>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","items","selectFilter","filter","Contacts","contactItem","dispatch","useDispatch","id","name","number","type","onClick","deleteContact","ContactList","useSelector","filteredContacts","el","toLowerCase","includes","map","contact","Filter","onChange","e","changeFilter","target","value","pattern","title","required","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","Form","useState","setName","setNumber","nameInputId","numberInputId","handelInputChange","evt","reset","onSubmit","preventDefault","some","alert","addContact","useEffect","requestContacts","length"],"sourceRoot":""}